name: Build

on:
    workflow_call:
        inputs:
            docker-image-tag:
                description: The docker image tag to use
                required: true
                type: string
            publish-snapshots:
                description: Whether the snapshots should be published (true/false)
                required: true
                type: boolean
        secrets:
            docker_hub_token:
                required: false
                description: Docker Hub token

jobs:
    check-code-gen:
        name: Check Code Generation
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Setup GoLang
              uses: actions/setup-go@v5
              with:
                  go-version: "1.22.2"
            - name: Generate code
              run: make generate manifests
            - name: Check for changes
              run: |
                  if [ -n "$(git status --porcelain)" ]; then
                    echo "There are new changes after the code generation. Please run 'make generate manifests' and commit the changes"
                    git diff -p
                    exit 1
                  fi

    check-code:
        name: Check Code
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Setup GoLang
              uses: actions/setup-go@v5
              with:
                  go-version: "1.22.2"
            - name: Vet Code
              run: make vet
            - name: Check Code Format
              run: |
                  make fmt
                  if [ -n "$(git status --porcelain)" ]; then
                    echo "There are new changes after the code format. Please run 'make fmt' and commit the changes"
                    exit 1
                  fi

    validate-bundle:
        name: Run Operator Bundle Validator
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Validate Bundle
              run: |
                make bundle
                ./bin/operator-sdk bundle validate ./bundle \
                  --image-builder none \
                  --select-optional name=community

    run-super-linter:
        name: Run GitHub Super Linter
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Lint Code Base
              uses: super-linter/super-linter@v7
              env:
                  DEFAULT_BRANCH: main
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  VALIDATE_ALL_CODEBASE: "true"
                  VALIDATE_CHECKOV: "false"
                  VALIDATE_GO: "false"
                  VALIDATE_GO_MODULES: "false"
                  VALIDATE_YAML_PRETTIER: "false"
                  VALIDATE_KUBERNETES_KUBEVAL: "false"
                  VALIDATE_KUBERNETES_KUBECONFORM: "false"
                  KUBERNETES_KUBEVAL_OPTIONS: --ignore-missing-schemas

    run-codeql-analysis:
        name: Run CodeQL Analysis
        runs-on: ubuntu-latest
        permissions:
            actions: read
            contents: read
            security-events: write
        strategy:
            fail-fast: false
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: go
            - name: Autobuild
              uses: github/codeql-action/autobuild@v3
            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v3

    run-unit-tests:
        name: Run Unit Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Setup GoLang
              uses: actions/setup-go@v5
              with:
                  go-version: "1.22.2"
            - name: Run Unit Tests
              run: make test.unit

    build-operator:
        name: Build Operator
        runs-on: ubuntu-latest
        needs:
            - check-code-gen
            - check-code
            - validate-bundle
            - run-super-linter
            - run-codeql-analysis
            - run-unit-tests
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Setup GoLang
              uses: actions/setup-go@v5
              with:
                  go-version: "1.22.2"
            - name: Sanitize Docker Image Tag
              env:
                  BRANCH_NAME: ${{ inputs.docker-image-tag }}
              run: |
                  echo "DOCKER_IMAGE_TAG=${BRANCH_NAME/\//-}" >> "${GITHUB_ENV}"
            - name: Generate code
              run: make generate manifests bundle
              env:
                  IMG: "nadunrds/k8s-replicator:${{ env.DOCKER_IMAGE_TAG }}"
                  BUNDLE_IMG: "nadunrds/k8s-replicator-bundle:${{ env.DOCKER_IMAGE_TAG }}"
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3
            - name: Available platforms
              run: echo ${{ steps.buildx.outputs.platforms }}
            - name: Generate code
              run: make generate manifests bundle
              env:
                  IMG: "nadunrds/mesh-manager:${{ github.ref_name }}"
                  BUNDLE_IMG: "nadunrds/mesh-manager-bundle:${{ github.ref_name }}"
            - name: Building Controller
              run: make docker-build
              env:
                  IMG: "nadunrds/mesh-manager:${{ env.DOCKER_IMAGE_TAG }}"
            - name: Run Trivy vulnerability scanner on Controller
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: nadunrds/mesh-manager:${{ env.DOCKER_IMAGE_TAG }}
                  format: 'table'
                  exit-code: '1'
                  ignore-unfixed: true
                  trivyignores: .trivyignore.controller
            - name: Building Controller Bundle
              run: make bundle-build
              env:
                  BUNDLE_IMG: "nadunrds/mesh-manager-bundle:${{ env.DOCKER_IMAGE_TAG }}"
            - name: Run Trivy vulnerability scanner on Controller Bundle
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: nadunrds/mesh-manager-bundle:${{ env.DOCKER_IMAGE_TAG }}
                  format: 'table'
                  exit-code: '1'
                  ignore-unfixed: true
                  trivyignores: .trivyignore.bundle
            - name: Login to the Container registry
              if: ${{ inputs.publish-snapshots == true }}
              uses: docker/login-action@v3
              with:
                  username: nadunrds
                  password: ${{ secrets.docker_hub_token }}
            - name: Pushing Controller
              if: ${{ inputs.publish-snapshots == true }}
              run: make docker-buildx
              env:
                  IMG: "nadunrds/mesh-manager:${{ env.DOCKER_IMAGE_TAG }}"
            - name: Pushing Controller Bundle
              if: ${{ inputs.publish-snapshots == true }}
              run: make bundle-push
              env:
                  BUNDLE_IMG: "nadunrds/mesh-manager-bundle:${{ env.DOCKER_IMAGE_TAG }}"

    validate-multi-architecture-bundle:
        name: Validate Bundle Multi Architecture Support
        runs-on: ubuntu-latest
        if: ${{ inputs.publish-snapshots == true }}
        needs:
            - build-operator
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Validate Bundle
              run: |
                make bundle
                ./bin/operator-sdk bundle validate docker.io/nadunrds/mesh-manager-bundle:${{ github.sha }} \
                  --image-builder none \
                  --select-optional name=multiarch
