name: Build

on:
  workflow_call:
    inputs:
      version:
        description: The version of the artifacts to be built
        required: true
        type: string
      publish-artifacts:
        description: Whether the artifacts should be published (true/false)
        type: boolean
        default: false
      update-latest-tag:
        description: Whether the latest tag should be updated to the current build (true/false)
        type: boolean
        default: false
    secrets:
      docker-hub-token:
        required: false
        description: Docker Hub token

permissions:
  contents: read
  actions: read
  security-events: write
  checks: write

env:
  IMAGE_TAG_BASE: nadunrds/mesh-manager

jobs:
  check-code-gen:
    name: Check Code Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup GoLang
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.1"
      - name: Generate code
        run: make bundle
        env:
          ARTIFACTS_VERSION: ${{ inputs.version }}
      - name: Check for changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "There are new changes after the code generation. Please run 'make bundle' and commit the changes"
            git diff -p
            exit 1
          fi

  check-code:
    name: Check Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup GoLang
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.1"
      - name: Vet Code
        run: make vet
      - name: Lint Code
        run: make lint
      - name: Check Code Format
        run: |
          make fmt
          if [ -n "$(git status --porcelain)" ]; then
            echo "There are new changes after the code format. Please run 'make fmt' and commit the changes"
            exit 1
          fi

  run-super-linter:
    name: Run GitHub Super Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Build Kustomize manifests
        run: make manifests
        env:
          IMG: ${{ env.IMAGE_TAG_BASE }}:${{ github.sha }}
      - name: Lint Code Base
        uses: super-linter/super-linter@v7
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: "true"
          VALIDATE_CHECKOV: "false"
          VALIDATE_GO: "false"
          VALIDATE_GO_MODULES: "false"
          VALIDATE_YAML_PRETTIER: "false"
          VALIDATE_KUBERNETES_KUBEVAL: "false"
          VALIDATE_KUBERNETES_KUBECONFORM: "false"
          KUBERNETES_KUBEVAL_OPTIONS: --ignore-missing-schemas

  run-codeql-analysis:
    name: Run CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  validate-bundle:
    name: Run Operator Bundle Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Validate Bundle
        run: |
          make bundle

  run-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup GoLang
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.1"
      - name: Run Unit Tests
        run: make test.unit

  build-operator:
    name: Build Operator
    runs-on: ubuntu-latest
    needs:
      - check-code-gen
      - check-code
      - validate-bundle
      - run-super-linter
      - run-codeql-analysis
      - run-unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup GoLang
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.1"
      - id: generate-bundle-version
        name: Generate Bundle Version
        env:
          ARTIFACTS_VERSION: ${{ inputs.version }}
        run: |
          echo "bundle-version=${ARTIFACTS_VERSION/\//-}" >> "${GITHUB_OUTPUT}"
      - name: Generate code
        run: make generate manifests bundle
        env:
          VERSION: "${{ steps.generate-bundle-version.outputs.bundle-version }}"

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
      - name: Print Available Buildx Platforms
        run: echo "${SUPPORTED_PLATFORMS}"
        env:
          SUPPORTED_PLATFORMS: ${{ steps.setup-buildx.outputs.platforms }}
      - name: Build Controller
        run: make docker-build
        env:
          VERSION: "${{ steps.generate-bundle-version.outputs.bundle-version }}"
      - name: Run Trivy vulnerability scanner on Controller
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.IMAGE_TAG_BASE }}:${{ steps.generate-bundle-version.outputs.bundle-version }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          trivyignores: .trivyignore.controller

      - name: Building Controller Bundle
        run: make bundle-build
        env:
          VERSION: "${{ steps.generate-bundle-version.outputs.bundle-version }}"
      - name: Run Trivy vulnerability scanner on Controller Bundle
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.IMAGE_TAG_BASE }}-bundle:${{ steps.generate-bundle-version.outputs.bundle-version }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          trivyignores: .trivyignore.bundle

      - name: Login to the Container registry
        if: ${{ inputs.publish-artifacts == true }}
        uses: docker/login-action@v3
        with:
          username: nadunrds
          password: ${{ secrets.docker-hub-token }}
      - name: Pushing Controller
        if: ${{ inputs.publish-artifacts == true }}
        run: make docker-buildx
        env:
          VERSION: "${{ steps.generate-bundle-version.outputs.bundle-version }}"
      - name: Pushing Controller Bundle
        if: ${{ inputs.publish-artifacts == true }}
        run: make bundle-push
        env:
          VERSION: "${{ steps.generate-bundle-version.outputs.bundle-version }}"

      - name: Pushing Controller with latest Tag
        if: ${{ inputs.publish-artifacts == true && inputs.update-latest-tag == true }}
        run: make docker-buildx
        env:
          VERSION: "latest"
      - name: Pushing Controller Bundle with latest Tag
        if: ${{ inputs.publish-artifacts == true && inputs.update-latest-tag == true }}
        run: make bundle-push
        env:
          VERSION: "latest"

    outputs:
      bundle-version: ${{ steps.generate-bundle-version.outputs.bundle-version }}

  validate-multi-architecture-bundle:
    name: Validate Bundle Multi Architecture Support
    runs-on: ubuntu-latest
    if: ${{ inputs.publish-artifacts == true }}
    needs:
      - build-operator
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Validate Bundle
        run: |
          make operator-sdk
          ./bin/operator-sdk bundle validate "${IMAGE_TAG_BASE}-bundle:${VERSION}" \
            --select-optional name=multiarch
        env:
          VERSION: "${{ needs.build-operator.outputs.bundle-version }}"
